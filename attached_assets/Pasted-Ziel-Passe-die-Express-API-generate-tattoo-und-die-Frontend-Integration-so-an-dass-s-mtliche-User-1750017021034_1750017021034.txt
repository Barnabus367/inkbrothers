Ziel:
Passe die Express-API /generate-tattoo und die Frontend-Integration so an, dass sämtliche User-Eingaben aus dem Tattoo-Konfigurator (Beschreibung, Stil, Körperstelle und Größe) kombiniert als ein einziges, optimal verständliches KI-Prompt an HuggingFace gesendet werden.
Die Website soll immer funktionieren – auch bei Ausfällen oder Überlastungen der KI.

Backend (Express, Node.js)
Endpoint /generate-tattoo:

Erwartet ein Feld description (dieses enthält den vollständigen Prompt).

Ruft die HuggingFace API wie gehabt auf.

Gibt im Erfolgsfall das Bild (Base64) zurück, bei Fehlern ein neutrales SVG plus Fehlermeldung.

Keine Anpassung der Prompt-Logik im Backend erforderlich, alles läuft im Frontend.

Sicherstellen:

Token bleibt im Backend!

Rate-Limit, Fehler-Handling und Timeout wie bisher.

Frontend (React/Next/JS)
Anpassung der Prompt-Logik für KI-Bildgenerierung:

Alle relevanten Eingaben sammeln:

Beschreibung der Tattoo-Idee

Gewählter Stil (z. B. „Black & Grey“)

Gewählte Körperstelle (z. B. „Oberarm“)

Gewählte Größe (z. B. „medium (5–15cm)“)

Kombiniere diese zu einem klaren, englischsprachigen Prompt für die KI.

Beispiel für einen Prompt:

"Dragon with flowers, in black & grey style, for the upper arm, size: medium (5–15cm), tattoo design, high resolution, clear lines, trending on instagram, detailed"

Code-Logik für den Prompt (React/JS):

js
Kopieren
Bearbeiten
const styleText = selectedStyle ? `in ${selectedStyle} style` : "";
const bodyPartText = selectedBodyPart ? `for the ${selectedBodyPart}` : "";
const sizeText = formData.size
  ? ({
      small: "size: small (up to 5cm)",
      medium: "size: medium (5–15cm)",
      large: "size: large (15–25cm)",
      xlarge: "size: very large (over 25cm)",
    }[formData.size])
  : "";

const fullPrompt = [
  formData.description,
  styleText,
  bodyPartText,
  sizeText,
  "tattoo design, high resolution, clear lines, trending on instagram, detailed"
].filter(Boolean).join(", ");
Sende diesen fullPrompt wie gehabt als description im API-Request an /generate-tattoo.

js
Kopieren
Bearbeiten
const response = await fetch('/api/generate-tattoo', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ description: fullPrompt }),
});
Fehler-Handling bleibt wie bisher (Fallback-Bild, User-Feedback, keine UI-Ausfälle).

Zusatzhinweise für Entwickler/KI-Agentur:
Die KI versteht nur, was im Prompt steht. Es ist essentiell, dass Stil, Körperstelle und Größe explizit in den Text aufgenommen werden, am besten in Englisch.

Prompt kann flexibel erweitert werden (z. B. weitere Details, Mood, Farben).

Der API-Key bleibt immer im Backend – niemals im Frontend einbauen.

Prompt-Zusammensetzung immer nach folgendem Schema:

[Beschreibung], in [Stil] style, for the [Körperstelle], size: [Größe], tattoo design, high resolution, clear lines, trending on instagram, detailed

Ziel:
Die KI erhält immer alle User-Eingaben in Form eines einzigen, optimal formulierten Prompts und kann dadurch das perfekte Tattoo für den Kunden generieren.

